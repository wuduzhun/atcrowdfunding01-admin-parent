<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--指定字符集-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!--强制请求设置字符集-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--强制响应设置字符集-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!--这个Filter执行的顺序要在所有其他Filter前面-->
    <!--原因如下:-->
    <!--request.setCharacterEncoding(encoding)必须在request.getParameter()前面-->
    <!--response.setCharacterEncoding(encoding)必须在response.getWriter()前面-->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-web-mvc.xml</param-value>
        </init-param>
        <!-- ervlet 默认生命周期中，创建对象是在第一次接收请求时-->
        <!-- 而 DispatcherServlet 创建对象后有大量的“框架初始化”工作，不合适在第一次请求来做-->
        <!-- 设置 load-on-startup 就是让 DispatcherServlet 在Web应用程序启动时创建对象，初始化-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!-- url-pattern 配置方式一：/ 表示拦截所有请求 -->
        <!-- <url-pattern>/</url-pattern>-->
        <!-- url-pattern 配置方式二：配置请求扩展名-->
        <!-- 优点1：xxx.ccs、xxx.js、xxx.png等等静态资源完全不经过SpringMVC，不需要特殊处理-->
        <!-- 优点2：可以实现伪静态的效果，表面上看起来是访问一个HTML文件的静态资源，但实际上是经过 Java 代码运行的结果-->
        <!--    伪静态作用1:给黑客入侵增加难度-->
        <!--    伪静态作用2：有力SEO优化（让百度。谷歌这样的搜索引擎更容易找到我们的项目）-->
        <!-- 缺点：不符合RESTFUL风格-->
        <url-pattern>*.html</url-pattern>

        <!-- 为什么要另外在配置json扩展名呢？-->
        <!-- 如果一个Ajax请求扩展名是html，但实际服务器给浏览器返回的是json数据，二者就不匹配了，会出现406错误-->
        <!-- 为了Ajax 请求能够顺利拿到JSON格式响应数据，我们另外配置json扩展名-->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <!--这个Filter要在所有Filter前面-->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


</web-app>